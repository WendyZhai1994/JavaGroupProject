public ArrayList<Question> showQuestionSheet(String level, int numberOfQuestions) throws SQLException{
                  //String level = "Mix";
                  System.out.println("??????????????");
            ArrayList<Question> questionListE = new ArrayList<>();
            if (!level.equals("Mix")) {
                String ls_sql7 = "select * from USER1.QUESTIONS where questionlevel = '" + level + "' order by questiontype";
                rs = s.executeQuery(ls_sql7);
            } else {
                String ls_sql7 = "select * from USER1.QUESTIONS order by questionlevel";
                rs = s.executeQuery(ls_sql7);
            }

            //ResultSet rsQuestion;
            //List<Integer> list = new ArrayList<>(set);
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            Question q = new Question();
            while (rs.next()) {
                for (int j = 1; j < 12; j++) {
                    System.out.print(rs.getString(j) + " ");
                    if (rs.getString(2).equals("MC") || rs.getString(2).equals("MA")) {
                        q = new Question(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12));
                    } else {
                        q = new Question(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5));
                    }
                }
                questionListE.add(q);
                System.out.println();
            }

            for (int i = 0; i < questionListE.size(); i++) {
                System.out.println(questionListE.get(i).toString());
            }

            //choose random questions from arraylist
            System.out.println("choose random questions from arraylist");
            int numberRequested = 10;
            int rowIndex = numberRequested / 5 - 1;

            if (level.equals("Mix")) {
                int[][] numOfQuestions = {{2, 1, 2},
                {4, 2, 4},
                {6, 3, 6},
                {8, 4, 8}};
                for (int j = 0; j < 3; j++) {
                    int numberOfChoices = numOfQuestions[rowIndex][j];
                    ArrayList<Integer> list = getQuestionNumbersForMix(numberOfChoices, j);
                    for (int i = 0; i < list.size(); i++) {
                        System.out.println(list.get(i).intValue());
                        System.out.println(questionListE.get(list.get(i)).toString());
                    }

                }
            } else {
                int[][] numOfQuestions = {{2, 1, 1, 1},
                {3, 3, 2, 2},
                {4, 4, 4, 3},
                {5, 5, 5, 5}};
                for (int j = 0; j < 4; j++) {
                    int numberOfChoices = numOfQuestions[rowIndex][j];
                    ArrayList<Integer> list = getQuestionNumbers(numberOfChoices, j, level);

                    for (int i = 0; i < list.size(); i++) {
                        System.out.println(list.get(i).intValue());
                        System.out.println(questionListE.get(list.get(i)).toString());
                    }
                }
            } 
            return questionListE;
    }
    public ArrayList<Integer> getQuestionNumbers(int numberOfQuestions, int jn, String level) {

        //generate unique random numbers
        ArrayList<Integer> allquestions = new ArrayList<Integer>();
        Random r = new Random();
        int count = 0;
        int qNum = 0;
        if (level.equals("E") || level.equals("M")) {
            for (int j = 0; j < numberOfQuestions; j++) {
                qNum = r.nextInt(5) + 6 * jn + 1;
                while (allquestions.contains(qNum)) {
                    qNum = r.nextInt(5) + 6 * jn + 1;
                }
                allquestions.add(qNum);
            }
        } else {
            for (int j = 0; j < numberOfQuestions; j++) {
                qNum = r.nextInt(7) + 8 * jn + 1;
                while (allquestions.contains(qNum)) {
                    qNum = r.nextInt(7) + 8 * jn + 1;
                }
                allquestions.add(qNum);
            }
        }
        return allquestions;
    }

    public ArrayList<Integer> getQuestionNumbersForMix(int numberOfQuestions, int jn) {

        //generate unique random numbers
        ArrayList<Integer> allquestions = new ArrayList<Integer>();
        Random rE = new Random();
        int qNum = 0;
        for (int j = 0; j < numberOfQuestions; j++) {
            qNum = rE.nextInt(23) + 24 * jn + 1;
            while (allquestions.contains(qNum)) {
                qNum = rE.nextInt(23) + 24 * jn + 1;
            }
            allquestions.add(qNum);
        }

        return allquestions;
    }
